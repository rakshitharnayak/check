`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    09:20:02 04/05/2023 
// Design Name: 
// Module Name:    updown 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module updown_counter
(
    input  clk,
    input  rst_n,
    input  up_down,
    output  [6:0] count,
	 input start, input stop, input load,
	//  input [7:0] decimal,
    output [7:0] bcd,
	 output reg [6:0] seg1,
    output reg [6:0] seg2
);

    reg [6:0] count_reg;
reg [3:0] digit1, digit2;  //rem and quo

    always@(posedge clk or posedge rst_n or posedge start or posedge stop or posedge load or posedge up_down)
    begin
	     if (up_down)
		   begin
		   if(load)
			
				count_reg<=7'd90;
		 
            else if (rst_n | count_reg==7'd99)
            count_reg <= 7'd0;
				else if(start)
				count_reg <= count_reg + 7'd1;
				else if(stop)
				count_reg <= count_reg + 0;
			
				
             end
             
        else  
			begin
			if(load)
				count_reg=7'd10;
            else if (rst_n |count_reg==7'd0)
            count_reg <= 7'd99;
				else if(start)
				count_reg <= count_reg - 7'd1;
				else if(stop)
				count_reg <= count_reg + 0;
			
           end		  
    end

    assign count = count_reg;
	 
	 always @(*) begin
    digit1 = count_reg % 10;   //rem
    digit2 = count_reg / 10;    //quotient
end

assign bcd = {digit2, digit1}; //assign bcd=quo rem

always @(*) begin
    case(digit1)
        4'b0000: seg1 = 7'b111_1110; // 0
        4'b0001: seg1 = 7'b011_0000; // 1
        4'b0010: seg1 = 7'b110_1101; // 2
        4'b0011: seg1 = 7'b111_1001; // 3
		   4'b0100: seg1 = 7'b011_0011; // 4
        4'b0101: seg1 = 7'b101_1011; // 5
        4'b0110: seg1 = 7'b101_1111; // 6
        4'b0111: seg1 = 7'b111_0000; // 7
        4'b1000: seg1 = 7'b111_1111; // 8
        4'b1001: seg1 = 7'b111_1011; // 9
        default: seg1 = 7'b000_0001; // error
    endcase
end

always @(*) begin
    case(digit2)
        4'b0000: seg2 = 7'b111_1110; // 0
        4'b0001: seg2 = 7'b011_0000; // 1
        4'b0010: seg2 = 7'b110_1101; // 2
        4'b0011: seg2 = 7'b111_1001; // 3
        4'b0100: seg2 = 7'b011_0011; // 4
		  4'b0101: seg2 = 7'b101_1011; // 5
        4'b0110: seg2 = 7'b101_1111; // 6
        4'b0111: seg2 = 7'b111_0000; // 7
        4'b1000: seg2 = 7'b111_1111; // 8
        4'b1001: seg2 = 7'b111_1011; // 9
        default: seg2 = 7'b000_0001; // error
    endcase
end
endmodule

